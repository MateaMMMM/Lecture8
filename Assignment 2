import java.util.Random;

// Interface Average
interface Average {
    float average();
}

// Interface Scholarship
interface Scholarship {
    float rate();
}

// Class Person
class Person {
    String pname;

    // Constructor
    public Person(String pname) {
        this.pname = pname;
    }
}

// Class Employee inherits Person and implements Average
class Employee extends Person implements Average {
    int noSalaries;
    int[] salary = new int[12];

    // Constructor
    public Employee(String name, int n) {
        super(name);
        this.noSalaries = n;
        Random random = new Random();
        for (int i = 0; i < n; i++) {
            this.salary[i] = random.nextInt(30001); // Random values between 0 and 30000
        }
    }

    // Implementing abstract method from Average interface
    @Override
    public float average() {
        if (noSalaries == 0) {
            return 0;
        }
        int sum = 0;
        for (int i = 0; i < noSalaries; i++) {
            sum += salary[i];
        }
        return (float) sum / noSalaries;
    }
}

// Class Student inherits Person, implements Average, and implements Scholarship
class Student extends Person implements Average, Scholarship {
    int noGrades;
    Employee parent1, parent2;
    int[] grade = new int[6];

    // Constructor
    public Student(String name, int n, Employee r1, Employee r2) {
        super(name);
        this.noGrades = n;
        this.parent1 = r1;
        this.parent2 = r2;

        Random random = new Random();
        for (int i = 0; i < n; i++) {
            this.grade[i] = random.nextInt(6) + 5; // Random values between 5 and 10
        }
    }

    // Implementing abstract method from Average interface
    @Override
    public float average() {
        int sum = 0;
        for (int i = 0; i < noGrades; i++) {
            sum += grade[i];
        }
        return (float) sum / noGrades;
    }

    // Implementing abstract method from Scholarship interface
    @Override
    public float rate() {
        float gpa = average();
        float parentAverage = (parent1.average() + parent2.average()) / 2;
        return (gpa * 6) + ((60000 - parentAverage) * 4);
    }
}

public class MainClass {
    public static void main(String[] args) {
        // Create array of 6 employees (parents)
        Employee[] employees = new Employee[6];
        employees[0] = new Employee("Parent1", 3);
        employees[1] = new Employee("Parent2", 4);
        employees[2] = new Employee("UnemployedParent1", 0);
        employees[3] = new Employee("UnemployedParent2", 0);
        employees[4] = new Employee("Parent3", 2);
        employees[5] = new Employee("Parent4", 5);

        // Create array of 3 students with 2 parents
        Student[] students = new Student[3];
        students[0] = new Student("Student1", 6, employees[0], employees[1]);
        students[1] = new Student("Student2", 6, employees[2], employees[3]);
        students[2] = new Student("Student3", 6, employees[4], employees[5]);

        // Output student data
        for (Student student : students) {
            System.out.println("Name: " + student.pname);
            System.out.println("GPA: " + student.average());
            System.out.println("First Parent: " + student.parent1.pname + ", Average Salary: " + student.parent1.average());
            System.out.println("Second Parent: " + student.parent2.pname + ", Average Salary: " + student.parent2.average());
            System.out.println("Scholarship Points: " + student.rate());
            System.out.println("-----------------------");
        }

        // Announce the student with the highest scholarship points
        Student scholarshipRecipient = findScholarshipRecipient(students);
        System.out.println("The student with the highest scholarship points is: " + scholarshipRecipient.pname);
    }

    // Helper method to find the student with the highest scholarship points
    private static Student findScholarshipRecipient(Student[] students) {
        Student highestScorer = students[0];
        for (Student student : students) {
            if (student.rate() > highestScorer.rate()) {
                highestScorer = student;
            }
        }
        return highestScorer;
    }
}
